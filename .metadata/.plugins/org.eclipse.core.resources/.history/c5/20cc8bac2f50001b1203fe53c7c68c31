package uiQuanLyPhong;

import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JToolBar;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

import entities.KhachHang;
import entities.PhieuDatPhong;
import entities.Phong;
import services.QuanLyPhong;
import services.QuanLyThueTra;
import uiLogin.GUIMenu;
import uiQuanLyPhong.LookAheadTextField.TextLookAhead;

import java.awt.Font;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;

import javax.swing.border.TitledBorder;
import javax.swing.JComboBox;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;
import javax.swing.Box;
import javax.swing.ImageIcon;

public class GUIQLPhong1 extends JPanel implements MouseListener, ActionListener{
	/**
	 * Create the panel.
	 */
	JComboBox<String> cmbLoaiPhong;
	private DefaultTableModel tableModel;
	private JTable table;
	JButton btnThem, btnSua, btnLuu, btnXoa, btnLamMoi, btnBack;
	JToolBar toolBar;
	JPanel pNor;
	JLabel lblTitle;
	JLabel lblMaPhong, lblLoaiPhong, lblGiaPhong, lblGhiChu;
	private Frame child;
	private JTextField textfieldGiaPhong, textfieldMaPhong, textfieldGhiChu;
	private JButton btnTim;
	
	protected ArrayList<String> values = new ArrayList<String>();
	private StringArrayLookAhead lookAhead = new StringArrayLookAhead(values);
	public LookAheadTextField textSearch = new LookAheadTextField(4, lookAhead);
	private boolean flagThem = true;
	private SimpleDateFormat dinhDangNgay = new SimpleDateFormat("dd/MM/yyyy");
	
	
	public GUIQLPhong1(Frame parent) {
		
		child = parent;
		setBounds(32, 32, 1924, 771);
		setLayout(null);
		
		lblTitle = new JLabel("Quản Lý Phòng");
		lblTitle.setBounds(792, 5, 340, 58);
		lblTitle.setForeground(new Color(0xFFAA00));
		lblTitle.setFont(new Font("Times New Roman", Font.BOLD, 50));
		add(lblTitle);
		
		pNor = new JPanel();
		pNor.setBorder(new TitledBorder(null, "T\u00E1c v\u1EE5 ph\u00F2ng", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		pNor.setBounds(82, 74, 716, 657);
		add(pNor);
		pNor.setLayout(null);
		
		lblMaPhong = new JLabel("Mã Phòng:");
		lblMaPhong.setFont(new Font("Times New Roman", Font.BOLD, 14));
		lblMaPhong.setHorizontalAlignment(SwingConstants.RIGHT);
		lblMaPhong.setBounds(28, 59, 113, 35);
		pNor.add(lblMaPhong);
		
		lblLoaiPhong = new JLabel("Giá Phòng:");
		lblLoaiPhong.setFont(new Font("Times New Roman", Font.BOLD, 15));
		lblLoaiPhong.setHorizontalAlignment(SwingConstants.RIGHT);
		lblLoaiPhong.setBounds(43, 124, 98, 23);
		pNor.add(lblLoaiPhong);
		
		lblGiaPhong = new JLabel("Ghi chú:");
		lblGiaPhong.setFont(new Font("Times New Roman", Font.BOLD, 15));
		lblGiaPhong.setHorizontalAlignment(SwingConstants.RIGHT);
		lblGiaPhong.setBounds(57, 180, 84, 35);
		pNor.add(lblGiaPhong);
		
		lblGhiChu = new JLabel("Loại Phòng: ");
		lblGhiChu.setFont(new Font("Times New Roman", Font.BOLD, 15));
		lblGhiChu.setHorizontalAlignment(SwingConstants.RIGHT);
		lblGhiChu.setBounds(397, 59, 84, 35);
		pNor.add(lblGhiChu);
		
		cmbLoaiPhong = new JComboBox<String>();
		cmbLoaiPhong.setBounds(497, 59, 132, 35);
		pNor.add(cmbLoaiPhong);
		cmbLoaiPhong.addItem("Giường đôi");
		cmbLoaiPhong.addItem("VIP");
		cmbLoaiPhong.addItem("Giường đơn");
		cmbLoaiPhong.addItem("Thường");
		
		textfieldGiaPhong = new JTextField();
		textfieldGiaPhong.setBounds(151, 118, 478, 35);
		pNor.add(textfieldGiaPhong);
		textfieldGiaPhong.setColumns(10);
		
		textfieldMaPhong = new JTextField();
		textfieldMaPhong.setBounds(151, 59, 157, 35);
		pNor.add(textfieldMaPhong);
		textfieldMaPhong.setColumns(10);
		
		textfieldGhiChu = new JTextField();
		textfieldGhiChu.setBounds(154, 180, 477, 35);
		pNor.add(textfieldGhiChu);
		textfieldGhiChu.setColumns(10);
		textSearch.setBounds(124, 267, 137, 42);
		
		textSearch.setBounds(125, 247, 443, 35);
		pNor.add(textSearch);
		
		btnTim = new JButton("Tìm");
		btnTim.setBackground(new Color(0, 191, 255));
		btnTim.setFont(new Font("Tahoma", Font.PLAIN, 13));
		btnTim.setIcon(new ImageIcon(".\\image\\find.png"));
		btnTim.setBounds(578, 247, 105, 35);
		pNor.add(btnTim);
		
		btnLamMoi = new JButton("Làm Mới");
		btnLamMoi.setFont(new Font("Tahoma", Font.PLAIN, 13));
		btnLamMoi.setIcon(new ImageIcon(".\\image\\reload.png"));
		btnLamMoi.setBounds(497, 309, 113, 35);
		pNor.add(btnLamMoi);
		
		btnThem = new JButton("Thêm");
		btnThem.setFont(new Font("Tahoma", Font.PLAIN, 13));
		btnThem.setIcon(new ImageIcon(".\\image\\add.png"));
		btnThem.setBounds(88, 366, 113, 35);
		pNor.add(btnThem);
		
		btnSua = new JButton("Chỉnh Sửa");
		btnSua.setFont(new Font("Tahoma", Font.PLAIN, 13));
		btnSua.setIcon(new ImageIcon(".\\image\\edit.png"));
		btnSua.setBounds(305, 366, 113, 35);
		pNor.add(btnSua);
		
		btnXoa = new JButton("Xóa");
		btnXoa.setFont(new Font("Tahoma", Font.PLAIN, 13));
		btnXoa.setIcon(new ImageIcon(".\\image\\remove.png"));
		btnXoa.setBounds(522, 366, 113, 35);
		pNor.add(btnXoa);
		
		btnBack = new JButton("Lùi Về Trang Trước");
		btnBack.setBackground(Color.RED);
		btnBack.setFont(new Font("Tahoma", Font.PLAIN, 13));
		btnBack.setIcon(new ImageIcon(".\\image\\logout.png"));
		btnBack.setBounds(453, 593, 240, 42);
		pNor.add(btnBack);
		
		
		// Table
		String[] cols = "Mã Phòng;Loại Phòng;Giá Phòng;Ghi Chú;Tình Trạng Phòng;Tên Khách Hàng;CMND;Ngày Sinh;Giới Tính".split(";");
		tableModel = new DefaultTableModel(cols, 0);
		table = new JTable(tableModel) {
			public boolean isCellEditable(int row, int col) {
				return false;
			}
			public Component prepareRenderer(TableCellRenderer renderer, int row, int col) {
				Component c = super.prepareRenderer(renderer, row, col);
				if (row % 2 == 0 && !isCellSelected(row, col)) {
					c.setBackground(Color.decode("#F1F1F1"));
				} else if (!isCellSelected(row, col)) {
					c.setBackground(Color.decode("#D7F1FF"));
				} else {
					c.setBackground(Color.decode("#25C883"));
				}
				return c;
				}
			};
		table.setAutoCreateRowSorter(true);
		JTableHeader header1 = table.getTableHeader();
		header1.setBackground(Color.CYAN);
		header1.setOpaque(false);
	// xét cứng cột
		table.getTableHeader().setReorderingAllowed(false);
		JScrollPane scroll = new JScrollPane(table);
		scroll.setBounds(818, 80, 1022, 646);
		scroll.setPreferredSize(new Dimension(1150, 200));
		add(scroll);
		find();			
		scroll.setViewportView(table);
		
		textfieldGiaPhong.setEditable(false);
		textfieldGhiChu.setEditable(false);
		textfieldMaPhong.setEditable(false);
		cmbLoaiPhong.setEnabled(false);
//		btnThem.setEnabled(false);
		btnLamMoi.setEnabled(false);
		btnSua.setEnabled(false);
//		btnXoa.setEnabled(false);
		cmbLoaiPhong.setSelectedItem(null);

		layGiaTrichoDienTuDong();

// Đăng ký Sự kiện cho các button
		btnLamMoi.addActionListener(this);
		btnBack.addActionListener(this);
		btnTim.addActionListener(this);
		btnThem.addActionListener(this);
		btnXoa.addActionListener(this);
		btnSua.addActionListener(this);
		table.addMouseListener(this);
//		btnLuu.addActionListener(new luu());

	}

	/*
	 * private void createButton(JButton button, Dimension size) {
	 * button.setPreferredSize(size); button.setMinimumSize(size);
	 * button.setMaximumSize(size); }
	 */

	// Xử lý sự kiện cho các button
	public void lamMoi() {
		for (int i = tableModel.getRowCount() - 1; i >= 0; i--)
			tableModel.removeRow(i);
		textfieldMaPhong.setText("");
		cmbLoaiPhong.setSelectedItem("");
		textfieldGhiChu.setText("");
		textfieldGiaPhong.setText("");
		textSearch.setText("");
		find();
	}

	public void goBack() {
		new GUIMenu(GUIMenu.ktrLogin);
		child.setVisible(false);
	}

	public void Tim() {
		for (int i = tableModel.getRowCount() - 1; i >= 0; i--)
			tableModel.removeRow(i);
		find();
		textSearch.setText("");
		textSearch.requestFocus();

	}

	public void them1() {
		textfieldGhiChu.setText("");
		textfieldGiaPhong.setText("");
		textfieldMaPhong.setText("");

		btnSua.setEnabled(true);
//		btnXoa.setEnabled(true);
		textfieldGhiChu.setEditable(true);
		textfieldGiaPhong.setEditable(true);
		cmbLoaiPhong.setEnabled(true);

		cmbLoaiPhong.setSelectedItem(null);
		flagThem = false;

	}

	@Override
	public void mouseReleased(MouseEvent e) {
		Object src = e.getSource();
		if (src.equals(table)) {
			btnThem.setEnabled(true);
			btnLamMoi.setEnabled(true);
			btnSua.setEnabled(true);
//			btnXoa.setEnabled(true);
			cmbLoaiPhong.setEnabled(true);

			textfieldGhiChu.setEditable(true);
			textfieldGiaPhong.setEditable(true);
			cmbLoaiPhong.setEditable(true);
			flagThem = false;

			hienDLSangTextfield(table.getSelectedRow());
		}
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		Object src = e.getSource();

		if (src.equals(btnLamMoi))
			lamMoi();
		else if (src.equals(btnThem)) {
			if (flagThem)
				them1();
			else
				them2();
		} else if (src.equals(btnSua))
			chinhSua();
		else if (src.equals(btnTim))
			Tim();
		else if (src.equals(btnBack))
			goBack();

	}

	// chưa xử lý dữ liệu vào
	public void them2() {
		try {
			QuanLyPhong ql = new QuanLyPhong();

			if (textfieldMaPhong.getText().equals("")) {
				if (textfieldGiaPhong.getText().toString().equals("") || textfieldGhiChu.getText().toString().equals("")
						|| cmbLoaiPhong.getSelectedIndex() == -1) {
					JOptionPane.showMessageDialog(null, "Thêm không thành công. Bạn chưa nhập đủ thông tin",
							"Thông báo", 0, new ImageIcon(".\\image\\error.png"));
					throw new Exception();
				} else {
					String mess = "Bạn có chắc chắn muốn thêm phòng có thông tin:\nLoại phòng: \""
							+ cmbLoaiPhong.getSelectedItem().toString() + "\", \nGiá phòng: \""
							+ textfieldGiaPhong.getText().toString() + "\", \nGhi chú: \""
							+ textfieldGhiChu.getText().toString() + "\" không?";

					if (JOptionPane.showConfirmDialog(null, mess, "Thêm phòng", JOptionPane.YES_NO_OPTION, 0,
							new ImageIcon(".\\image\\question.png")) == JOptionPane.YES_OPTION) {

						ql.them(cmbLoaiPhong.getSelectedItem().toString(),
								Integer.parseInt(textfieldGiaPhong.getText().toString()), textfieldGhiChu.getText());
						JOptionPane.showMessageDialog(null, "Đã thêm thành công", "Thông báo", 0,
								new ImageIcon(".\\image\\success.png"));

						find();
						flagThem = true;
					} else
						JOptionPane.showMessageDialog(null, "Thêm không thành công. Vì bạn chọn không thêm.",
								"Thông báo", 0, new ImageIcon(".\\image\\error.png"));
				}
			} else {
				for (int i = 0; i < table.getRowCount(); i++)
					if (Integer.parseInt(textfieldMaPhong.getText()) == Integer
							.parseInt(table.getValueAt(i, 0).toString())) {
						JOptionPane.showMessageDialog(null, "Thêm không thành công.", "Thông báo", 0,
								new ImageIcon(".\\image\\error.png"));
						throw new Exception();
					}

				JOptionPane.showMessageDialog(null, "Thêm không thành công. Mã phòng không được nhập.", "Thông báo", 0,
						new ImageIcon(".\\image\\error.png"));

			}
		} catch (Exception e) {
		}
	}

	public void actionTim(String maPhong, String ghiChu, String gia, String loai, String ngayDen, String ngayDi) {
		try {
			QuanLyPhong qlp = new QuanLyPhong();
			//String maDV, String tenDV, String donVi, String loai, String soLuongCo, String giaDV
			ArrayList<Phong> list = qlp.timKiemTheoThuocTinh(maPhong, ghiChu, gia, loai, ngayDen, ngayDi);
			if(list.size()==0) {
				JOptionPane.showMessageDialog(this, "Không Tìm Thấy");
			}
			else updateTableData1(list);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	private void updateTableData1(ArrayList<Phong> list) {
		xoaTableData();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		for(Phong p : list) {
			//Mã Phòng;Loại Phòng;Giá Phòng;Ghi Chú;Tình Trạng Phòng;Tên Khách Hàng;CMND;Ngày Sinh;Giới Tính
			String[] rowData = {p.getId()+"",p.getLoaiPhong(),p.getGiaPhong()+"",p.getGhiChu(),"","","","",""};
			tableModel.addRow(rowData);
		}
		table.setModel(tableModel);
	}
	private void xoaTableData() {
		while(tableModel.getRowCount()>0) {
			tableModel.removeRow(0);
		}
	}
	public void chinhSua() {

		int chonTable = table.getSelectedRow();
		QuanLyPhong ql = new QuanLyPhong();
		if (chonTable == -1)
			JOptionPane.showMessageDialog(null, "Bạn chưa chọn phòng để chỉnh sửa", "Error", 0,
					new ImageIcon(".\\image\\error.png"));
		else {
			String mess = "Bạn có muốn cập nhật lại giá trị tại phòng có mã phòng: "
					+ table.getValueAt(table.getSelectedRow(), 0).toString();

			if (JOptionPane.showConfirmDialog(null, mess, "Sửa thông tin phòng", JOptionPane.YES_NO_OPTION, 0,
					new ImageIcon(".\\image\\question.png")) == JOptionPane.YES_OPTION) {

				// Bắt lỗi khi chưa thay đổi giá trị
				String giaPhong = table.getValueAt(chonTable, 2).toString();
				String[] tien = giaPhong.split(",");
				String money = "";
				for (String a : tien)
					money += a;
				String[] chuyenTienSangtxt = money.split(" ");

				if (cmbLoaiPhong.getSelectedItem().toString().equals(table.getValueAt(chonTable, 1))
						&& textfieldGhiChu.getText().equals(table.getValueAt(chonTable, 3))
						&& Integer.parseInt(textfieldGiaPhong.getText()) == Integer.parseInt(chuyenTienSangtxt[0]))
					JOptionPane.showMessageDialog(null, "Cập nhật không thành công. Vì bạn chưa sửa thông tin", "Error",
							0, new ImageIcon(".\\image\\error.png"));
				else {
					ql.updatePhong(Integer.parseInt(table.getValueAt(table.getSelectedRow(), 0).toString()) - 100,
							cmbLoaiPhong.getSelectedItem().toString(), Integer.parseInt(textfieldGiaPhong.getText()),
							textfieldGhiChu.getText());

					JOptionPane.showMessageDialog(null, "Đã cập nhật thành công", "Thông báo", 0,
							new ImageIcon(".\\image\\success.png"));
				}
			} else
				JOptionPane.showMessageDialog(null, "Cập nhật không thành công. Vì bạn chọn No", "Error", 0,
						new ImageIcon(".\\image\\error.png"));

			xoaDLBang();
			find();
			table.addRowSelectionInterval(chonTable, chonTable);

		}

	}

	public void hienDLSangTextfield(int row) {
		if (row != -1) {
			String maPhong = table.getValueAt(row, 0) + "";
			textfieldMaPhong.setText(maPhong);

			String giaPhong = table.getValueAt(row, 2) + "";
			String[] tien = giaPhong.split(",");
			String money = "";
			for (String a : tien)
				money += a;
			String[] chuyenTienSangtxt = money.split(" ");
			textfieldGiaPhong.setText(chuyenTienSangtxt[0]);

			String ghiChu = table.getValueAt(row, 3) + "";
			textfieldGhiChu.setText(ghiChu);

			String loaiPhong = table.getValueAt(row, 1) + "";
			cmbLoaiPhong.setSelectedItem(loaiPhong);
		}
	}

	public void xoaDLBang() {
		for (int i = tableModel.getRowCount() - 1; i >= 0; i--)
			tableModel.removeRow(i);
	}

	public void find() {
		QuanLyThueTra qlPhieu = new QuanLyThueTra();
		QuanLyPhong qlPhong = new QuanLyPhong();
		ArrayList<PhieuDatPhong> dsDatPhong = qlPhieu.layDLPhong_KH();
		KhachHang kh = new KhachHang();

		ArrayList<Phong> dsPhong = new ArrayList<Phong>();
		if (textSearch.getText().equals("")) {
			dsPhong = qlPhong.docTuBang();
		} else {
			String[] tien = textSearch.getText().split(",");
			String money = "";
			for (String a : tien)
				money += a;
			String[] chuyenTienSangtxt = money.split(" ");
			
			
			ArrayList<Phong> timTheoGia;
			ArrayList<Phong> timTheoLoai = qlPhong.timTheoLoaiPhong(textSearch.getText());
			ArrayList<Phong> timTheoTinhTrang = qlPhong.timTheoTinhTrangPhong(textSearch.getText());
			int maPhong = -1;
			int giaTien=-1;
			try {
				maPhong = Integer.parseInt(textSearch.getText()) - 100;
				giaTien=Integer.parseInt(chuyenTienSangtxt[0]);
				throw new Exception();
			} catch (Exception e) {
			}
			dsPhong = qlPhong.timTheoMa(maPhong);
			timTheoGia = qlPhong.timTheoGiaPhong(giaTien);

			for (Phong p : timTheoGia) {
				if (p.getId() != maPhong) {
					dsPhong.add(p);
					//System.out.println("Vô được 2");
				}
			}
			for (Phong p : timTheoLoai) {
				if (p.getId() != maPhong)
					dsPhong.add(p);
			}
			for (Phong p : timTheoTinhTrang) {
				if (p.getId() != maPhong)
					dsPhong.add(p);
			}

		}
		xoaDLBang();
		for (Phong p : dsPhong) {
			String tinhTrangPhong = "";
			if (p.getTinhTrangPhong() == 0) {
				tinhTrangPhong = "Trống";
				kh = new KhachHang(-1, "", "", null, -1, "");
				//System.out.println(kh.getId());

			}
//			else if (p.getTinhTrangPhong() == 1)
//				tinhTrangPhong = "Đã đặt";
			else if (p.getTinhTrangPhong() == 2) {
				tinhTrangPhong = "Đến hạn Checkin";
				for (PhieuDatPhong phieu : dsDatPhong)
					if (p.getId() == phieu.getPhong().getId())
						kh = phieu.getKhachHang();
				//System.out.println(kh.getId());

			} else if (p.getTinhTrangPhong() == 3) {
				tinhTrangPhong = "Đang sử dụng";
				for (PhieuDatPhong phieu : dsDatPhong)
					if (p.getId() == phieu.getPhong().getId())
						kh = phieu.getKhachHang();
				//System.out.println(kh.getId());

			} else if (p.getTinhTrangPhong() == 4) {
				tinhTrangPhong = "Đến hạn Checkout";
				for (PhieuDatPhong phieu : dsDatPhong)
					if (p.getId() == phieu.getPhong().getId())
						kh = phieu.getKhachHang();

			}
			DecimalFormat money = new DecimalFormat("#,###.### Đồng");
			String giaPhong = money.format(p.getGiaPhong());
			String gioiTinh = "Nam";

			if (kh.getGioiTinh() == 1)
				gioiTinh = "Nữ";
			if (kh.getMa() != -1) {
				String[] rowData = { p.getId() + 100 + "", p.getLoaiPhong(), giaPhong, p.getGhiChu(), tinhTrangPhong,
						kh.getHoTen(), kh.getcMND(), dinhDangNgay.format(kh.getNgaySinh()), gioiTinh };
				tableModel.addRow(rowData);
			} else {
				String[] rowData = { p.getId() + 100 + "", p.getLoaiPhong(), giaPhong, p.getGhiChu(), tinhTrangPhong,
						"null", "null", "null", "null" };
				tableModel.addRow(rowData);
			}
		}

	}

	public void layGiaTrichoDienTuDong() {
		for (int i = 0; i < table.getRowCount(); i++) {
			values.add(table.getValueAt(i, 0).toString());
			values.add(table.getValueAt(i, 1).toString());
			values.add(table.getValueAt(i, 2).toString());
			values.add(table.getValueAt(i, 4).toString());
		}

	}

	@Override
	public void mouseClicked(MouseEvent e) {

	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub

	}

}

// Tạo autoComplete Text
//class LookAheadTextField extends JTextField {
//	public LookAheadTextField() {
//		this(0, null);
//	}
//
//	public LookAheadTextField(int columns) {
//		this(columns, null);
//	}
//
//	public LookAheadTextField(int columns, TextLookAhead lookAhead) {
//		super(columns);
//		setLookAhead(lookAhead);
//		addActionListener(new ActionListener() {
//			public void actionPerformed(ActionEvent evt) {
//				// Remove any existing selection
//				setCaretPosition(getDocument().getLength());
//			}
//		});
//		addFocusListener(new FocusListener() {
//			public void focusGained(FocusEvent evt) {
//			}
//
//			public void focusLost(FocusEvent evt) {
//				if (evt.isTemporary() == false) {
//					// Remove any existing selection
//					setCaretPosition(getDocument().getLength());
//				}
//			}
//		});
//	}
//
//	public void setLookAhead(TextLookAhead lookAhead) {
//		this.lookAhead = lookAhead;
//	}
//
//	public TextLookAhead getLookAhead() {
//		return lookAhead;
//	}
//
//	public void replaceSelection(String content) {
//		super.replaceSelection(content);
//
//		if (isEditable() == false || isEnabled() == false) {
//			return;
//		}
//
//		Document doc = getDocument();
//		if (doc != null && lookAhead != null) {
//			try {
//				String oldContent = doc.getText(0, doc.getLength());
//				String newContent = lookAhead.doLookAhead(oldContent);
//				if (newContent != null) {
//					// Substitute the new content
//					setText(newContent);
//
//					// Highlight the added text
//					setCaretPosition(newContent.length());
//					moveCaretPosition(oldContent.length());
//				}
//			} catch (BadLocationException e) {
//				// Won't happen
//			}
//		}
//	}
//
//	protected TextLookAhead lookAhead;
//
//	// The TextLookAhead interface
//	public interface TextLookAhead {
//		public String doLookAhead(String key);
//	}
//}
//
//class StringArrayLookAhead implements LookAheadTextField.TextLookAhead {
//	public StringArrayLookAhead() {
//		values = new ArrayList<String>();
//	}
//
//	public StringArrayLookAhead(ArrayList<String> values2) {
//		this.values = values2;
//	}
//
//	public void setValues(ArrayList<String> values) {
//		this.values = values;
//	}
//
//	public ArrayList<String> getValues() {
//		return values;
//	}
//
//	public String doLookAhead(String key) {
//		int length = values.size();
//
//		// Look for a string that starts with the key
//		for (int i = 0; i < length; i++) {
//			if (values.get(i).startsWith(key) == true) {
//				return values.get(i);
//			}
//		}
//
//		// No match found - return null
//		return null;
//	}
//
//	protected ArrayList<String> values;
//}

